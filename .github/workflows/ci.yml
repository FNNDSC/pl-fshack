# Automatically build multi-architectural tagged container images and push them to DockerHub
# https://github.com/FNNDSC/cookiecutter-chrisapp/wiki/Automatic-Builds
#
# - targeted platforms: x86_64, PowerPC64, ARM64
# - master is built as fnndsc/pl-dircopy:latest
# - tagged commits are built as fnndsc/pl-dircopy:<tag>
# - tagged commits are also uploaded to chrisstore.co
#
# In order to use this workflow, see
# https://github.com/FNNDSC/cookiecutter-chrisapp/wiki/Automatic-Builds#steps-to-enable

name: ci

on:
  push:
    # we have to guess what the name of the default branch is
    branches: [ main, master ]
    tags: [ "[0-9]+.[0-9]+.[0-9]+*" ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Stop docker
        run: sudo systemctl stop docker

      - name: Clean docker data
        run: |
            sudo rm -rf /var/lib/docker
            sudo mkdir /var/lib/docker

      - name: Maximize build space
        uses: easimon/maximize-build-space@6ae56c86ea8db291ae39f62352a412c36ab8179b
        with:
          root-reserve-mb: 8192  # space needed for logs
          swap-size-mb: 1024       # must be >0
          build-mount-path: /var/lib/docker
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'false'

      - name: Start docker
        run: sudo systemctl start docker

      - name: Decide image tags
        id: info
        shell: python
        run: |
          import os
          import itertools
          
          registries = ['docker.io', 'ghcr.io']
          repos = ['${{ github.repository }}']
          if '${{ github.ref_type }}' == 'branch':
            version = 'unknown'
            tags = ['latest']
          elif '${{ github.ref_type }}' == 'tag':
              tag = '${{ github.ref_name }}'
              version = tag[1:] if tag.startswith('v') else tag
              tags = ['latest', version]
          else:
              tags = []

          def join_tag(t):
              registry, repo, tag = t
              return f'{registry}/{repo}:{tag}'.lower()

          product = itertools.product(registries, repos, tags)
          tags_csv = ','.join(map(join_tag, product))
          outputs = {
              'tags_csv' : tags_csv,
              'push'     : 'true' if tags_csv else 'false',
              'local_tag': join_tag(('localhost', '${{ github.repository }}', 'latest')),
              'one_tag': join_tag(('ghcr.io', repos[0], version))
          }
          with open(os.environ['GITHUB_OUTPUT'], 'a') as out:
              for k, v in outputs.items():
                  out.write(f'{k}={v}\n')

      - uses: actions/checkout@v3
        # QEMU is used for non-x86_64 builds
      - uses: docker/setup-qemu-action@v3
        # buildx adds additional features to docker build
      - uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

        # Here, we want to do the docker build twice:
        # The first build pushes to our local registry for testing.
        # The second build pushes to Docker Hub and ghcr.io
      - name: Build (local only)
        uses: docker/build-push-action@v3
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.info.outputs.local_tag }}
          load: true
          cache-from: type=gha

      - name: Login to DockerHub
        if: (github.event_name == 'push' || github.event_name == 'release') && contains(steps.info.outputs.tags_csv, 'docker.io')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Login to GitHub Container Registry
        if: (github.event_name == 'push' || github.event_name == 'release') && contains(steps.info.outputs.tags_csv, 'ghcr.io')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        if: (github.event_name == 'push' || github.event_name == 'release')
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.info.outputs.tags_csv }}
          platforms: linux/amd64,linux/arm64,linux/ppc64le
          push: ${{ steps.info.outputs.push }}
          cache-to: type=gha,mode=max

      - name: Create plugin description
        run: |
          docker run --rm ${{ steps.info.outputs.local_tag }} fshack.py --json \
          | jq '. + {"name": "pl-fshack", "public_repo": "${{ github.server_url }}/${{ github.repository }}", "dock_image": "${{ steps.info.outputs.one_tag }}"}' > ./description.json
      - name: Upload ChRIS Plugin
        id: upload
        if: github.ref_type == 'tag'
        uses: FNNDSC/upload-chris-plugin@v1
        with:
          description_file: ./description.json
          username: ${{ secrets.CHRISPROJECT_USERNAME }}
          password: ${{ secrets.CHRISPROJECT_PASSWORD }}
          chris_url: https://cube.chrisproject.org/api/v1/
          compute_names: NERC

      - name: Update DockerHub description
        if: steps.upload.outcome == 'success'
        uses: peter-evans/dockerhub-description@v3
        continue-on-error: true  # it is not crucial that this works
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          short-description: ${{ steps.upload.outputs.title }}
          readme-filepath: ./README.rst